/*
 * Класи
 *  - Оголошення класу
 *  - Конструктор класу
 *  - Методи класу
 *  - Прототип екземпляру
 *  - Приватні властивості
 *  - Геттери і сеттери
 *  - Статичні властивості
 */

//* клас - це такий собі завод який описує поля та методи для одного обʼєкту і використовується для створення нових обʼєктів. Шаблон на основі якого створюються нові обʼєкти. Якщо заглянути під капот, то клас - це звичайний синтаксичний цукор старої фукнції конструктора якою раніше користувались в джс.

class Car {
  // статичні властивості та методи доступні тільки ЧЕРЕЗ сам клас. Оскільки клас - це функція, а функція - це обʼєкт, то ми можемо в цей обʼєкт записати якісь властивості або методи і використовувати їх через клас.

  static description = "Клас для створення автомобілів";
  static amount = 0;

  static addCar() {
    this.amount += 1;
    console.log(`Додано новий автомобіль. Поточна кількість: ${this.amount}`);
  }

  // приватне поле, завжди оголошується за межами конструктору і перед назвою обовʼязково потрібно поставити решітку
  #owner;

  // конструктор - це метод, який викликається під час створення екземпляру класу для того, щоб ініціалізувати новий обʼєкт
  constructor(brand, model, price, owner) {
    console.log("створився новий обʼєкт");

    Car.addCar();

    // публічні властивості - властивості класу, які доступні повсюди (всередині класу, в екземплярі, і в дочірньому класі під час наслідування)
    this.brand = brand;
    this.model = model;
    this.price = price;

    // захищені властивості - доступні тільки в класі та в класах які наслідуються, але технічно в джс немає такого поля, тому для імітації захищених полів прийнято ставити знак нижнього підкреслення на початку поля
    // this._protectedField = "sdfsdf"

    // приватні властивості - властивості класу які доступні тільки всередині класу і все. (Не доступна за межами класу, в екземплярі і в нащадках)
    this.#owner = owner;
  }

  // публічний метод - метод класу, який доступний повсюди (всередині класу, в екземплярі, і в дочірньому класі під час наслідування)
  displayInfo() {
    const isAdmin = this.#checkAdminPass();

    console.log(
      `Brand: ${this.brand}\nModel: ${this.model}\nPrice: ${this.price}${
        isAdmin ? `\nOwner: ${this.#owner}` : ""
      }`
    );
  }

  // приватний метод - те саме що і приватна властивість, доступний тільки в самому класі
  #checkAdminPass() {
    const pass = Number(prompt("Enter admin password:"));

    return pass === 1;
  }

  // методи аксесори - це методи які надають можливість читати (get) та перезаписувати (set) приватні поля класу. Фактично ці методи створюють одноіменне публічне поле, яке просто посилається на ваше приватне.

  // getter - нічого не приймає в параметрах та обовʼязково повинен повернути якесь значення (приватного поля)
  get owner() {
    if (this.#checkAdminPass()) {
      return this.#owner;
    }
    console.error("Немає доступу до читання!");
    return "";
  }

  // setter - обовʼязково в якості одного параметра очікує нове значення для приватного поля, нічого не повертає, його задача в тому щоб задати нове значення для приватного поля, зазвичай має таку ж назву як і геттер або саме приватне поле
  set owner(newOwner) {
    if (this.#checkAdminPass()) {
      this.#owner = newOwner;
      return;
    }

    console.error("Немає доступу до перезапису!");
  }
}

console.dir(Car);
console.log(Car.description);

const audi = new Car("Audi", "Rs7", 250000, "Den@gmail.com");
const bmw = new Car("BMW", "M8", 200000, "Alice@gmail.com");
/*
1. Створює новий обʼєкт (екземпляр класу)
2. викликає конструктор класу
3. вказує конструктору новостворений обʼєкт в якості this
*/

// console.log(audi);
// console.log(audi.owner);
// audi.owner = "Oleg@gmail.com";
// console.log(audi.owner);

// Приватне поле, не можна взаємодіяти з ним за межами класу
// console.log(audi.#owner);
// audi.#owner = "Rex";

// audi.displayInfo();
// bmw.displayInfo();
