/*
 * Передача за посиланням і за значенням
 *
 * Примітиви і складні типи
 * Посилальна рівність (referential equality)
 */

// масиви - це складні дані (структури даних), на відміну від примітивів вони зберігаються не за значенням, а за посиланням на комірку памʼяті

/*
? Створіть змінну a = 10.
? Створіть та привласніть змінній b, значення змінної a.
? Виведіть до консолі обидві ці змінні.
? Змініть значення змінної a і ще раз виведіть у консоль.
*/

// let a = 10;
// let b = a; // 10

// console.log("a:", a);
// console.log("b:", b);

// a = 15;

// console.log("a:", a); // 15
// console.log("b:", b); // 10

/*
? Створіть масив arr1 = [1, 2, 3].
? Створіть та привласніть змінній arr2, значення змінної arr1.
? Виведіть до консолі обидва цих масива.
? Додайте елемент в масив arr1 і ще раз виведете обидва масиви в консоль.
*/

// const arr1 = [1, 2, 3];
// const arr2 = arr1;

// console.log("arr1:", arr1);
// console.log("arr2:", arr2);

// arr1[1] = 10;

// console.log("arr1:", arr1); // [1, 10, 3];
// console.log("arr2:", arr2); // [1, 10, 3];

// console.log(arr1 === arr2); // true - тому що у них однакове посилання на комірку памʼяті де цей масив зберігається (тому що це один і тей самий масив). Порівнювати структури даних таким чином на рівність не можна (ви порівнюєте не дані, а адреси комірок памʼяті)

// const arr3 = [3, 4, 5];
// const arr4 = [3, 4, 5];

// console.log(arr3 === arr4); // false, порівняння відбувається не за значеннями всередині масиву а за адресами комірок, а це різні масиви

//* правильна копія масиву

const arr1 = [1, 2, 3];
//* v1
// const arr2 = [...arr1];
//* v2
// const arr2 = arr1.slice();
//* v3
// const arr2 = [].concat(arr1);
//* v4
const arr2 = Array.from(arr1);

console.log("arr1:", arr1);
console.log("arr2:", arr2);

arr1[1] = 10;

console.log("arr1:", arr1); // [1, 10, 3];
console.log("arr2:", arr2); // [1, 10, 3];

console.log(arr1 === arr2);

console.log("=========");
